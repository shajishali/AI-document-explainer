# Generated by Django 5.2.5 on 2025-08-14 09:35

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("main", "0003_connectivitystatus_offlinefeature_localcache_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ProductionEnvironment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("environment_name", models.CharField(max_length=100, unique=True)),
                (
                    "environment_type",
                    models.CharField(
                        choices=[
                            ("development", "Development"),
                            ("staging", "Staging"),
                            ("production", "Production"),
                            ("testing", "Testing"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("maintenance", "Maintenance"),
                            ("decommissioned", "Decommissioned"),
                            ("error", "Error"),
                        ],
                        max_length=20,
                    ),
                ),
                ("infrastructure_details", models.JSONField(default=dict)),
                ("configuration", models.JSONField(default=dict)),
                ("monitoring_enabled", models.BooleanField(default=True)),
                ("alerting_enabled", models.BooleanField(default=True)),
                ("backup_enabled", models.BooleanField(default=True)),
                ("last_deployment", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["environment_name"],
            },
        ),
        migrations.CreateModel(
            name="BackupRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("backup_name", models.CharField(max_length=200)),
                (
                    "backup_type",
                    models.CharField(
                        choices=[
                            ("database", "Database Backup"),
                            ("files", "File Backup"),
                            ("configuration", "Configuration Backup"),
                            ("full_system", "Full System Backup"),
                            ("incremental", "Incremental Backup"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("verification_pending", "Verification Pending"),
                            ("verified", "Verified"),
                            ("corrupted", "Corrupted"),
                        ],
                        max_length=20,
                    ),
                ),
                ("file_size_mb", models.FloatField(blank=True, null=True)),
                ("backup_location", models.CharField(max_length=500)),
                ("checksum", models.CharField(blank=True, max_length=128)),
                ("compression_ratio", models.FloatField(blank=True, null=True)),
                ("retention_days", models.IntegerField(default=30)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["backup_type"], name="main_backup_backup__a2f1a0_idx"
                    ),
                    models.Index(
                        fields=["status"], name="main_backup_status_2f1eb5_idx"
                    ),
                    models.Index(
                        fields=["started_at"], name="main_backup_started_11c769_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DataRetentionPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("user_data", "User Data"),
                            ("document_data", "Document Data"),
                            ("analytics_data", "Analytics Data"),
                            ("audit_logs", "Audit Logs"),
                            ("system_logs", "System Logs"),
                            ("backup_data", "Backup Data"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "retention_period_days",
                    models.IntegerField(help_text="Number of days to retain data"),
                ),
                (
                    "retention_reason",
                    models.TextField(
                        help_text="Legal or business reason for retention"
                    ),
                ),
                (
                    "disposal_method",
                    models.CharField(
                        choices=[
                            ("secure_deletion", "Secure Deletion"),
                            ("anonymization", "Anonymization"),
                            ("archival", "Archival"),
                            ("transfer", "Transfer to Third Party"),
                        ],
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["data_type"],
                "unique_together": {("data_type",)},
            },
        ),
        migrations.CreateModel(
            name="PerformanceTest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("test_name", models.CharField(max_length=200)),
                ("test_scenario", models.CharField(max_length=100)),
                (
                    "load_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Load"),
                            ("medium", "Medium Load"),
                            ("high", "High Load"),
                            ("peak", "Peak Load"),
                            ("stress", "Stress Test"),
                        ],
                        max_length=50,
                    ),
                ),
                ("concurrent_users", models.IntegerField()),
                (
                    "response_time_avg",
                    models.FloatField(
                        help_text="Average response time in milliseconds"
                    ),
                ),
                (
                    "response_time_p95",
                    models.FloatField(help_text="95th percentile response time"),
                ),
                (
                    "response_time_p99",
                    models.FloatField(help_text="99th percentile response time"),
                ),
                ("throughput", models.FloatField(help_text="Requests per second")),
                ("error_rate", models.FloatField(help_text="Error rate percentage")),
                ("cpu_usage", models.FloatField(help_text="CPU usage percentage")),
                (
                    "memory_usage",
                    models.FloatField(help_text="Memory usage percentage"),
                ),
                (
                    "test_duration",
                    models.IntegerField(help_text="Test duration in seconds"),
                ),
                ("run_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-run_at"],
                "indexes": [
                    models.Index(
                        fields=["test_scenario"], name="main_perfor_test_sc_ecabdb_idx"
                    ),
                    models.Index(
                        fields=["load_level"], name="main_perfor_load_le_3d219f_idx"
                    ),
                    models.Index(
                        fields=["run_at"], name="main_perfor_run_at_da2b38_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PrivacyPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("version", models.CharField(max_length=20, unique=True)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("ta", "Tamil"), ("si", "Sinhala")],
                        max_length=10,
                    ),
                ),
                ("effective_date", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-effective_date"],
            },
        ),
        migrations.CreateModel(
            name="QualityMetric",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("metric_name", models.CharField(max_length=100)),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("code_quality", "Code Quality"),
                            ("test_coverage", "Test Coverage"),
                            ("performance", "Performance"),
                            ("security", "Security"),
                            ("usability", "Usability"),
                            ("accessibility", "Accessibility"),
                        ],
                        max_length=50,
                    ),
                ),
                ("metric_value", models.FloatField()),
                ("target_value", models.FloatField(blank=True, null=True)),
                ("unit", models.CharField(blank=True, max_length=20)),
                ("measurement_date", models.DateTimeField(auto_now_add=True)),
                (
                    "trend",
                    models.CharField(
                        choices=[
                            ("improving", "Improving"),
                            ("stable", "Stable"),
                            ("declining", "Declining"),
                            ("unknown", "Unknown"),
                        ],
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-measurement_date"],
                "indexes": [
                    models.Index(
                        fields=["metric_name"], name="main_qualit_metric__34c23b_idx"
                    ),
                    models.Index(
                        fields=["metric_type"], name="main_qualit_metric__60c908_idx"
                    ),
                    models.Index(
                        fields=["measurement_date"],
                        name="main_qualit_measure_8f27da_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SecurityTest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("test_name", models.CharField(max_length=200)),
                (
                    "test_category",
                    models.CharField(
                        choices=[
                            ("vulnerability_scan", "Vulnerability Scan"),
                            ("penetration_test", "Penetration Test"),
                            ("code_analysis", "Code Analysis"),
                            ("dependency_check", "Dependency Check"),
                            ("configuration_audit", "Configuration Audit"),
                            ("access_control", "Access Control Test"),
                        ],
                        max_length=50,
                    ),
                ),
                ("vulnerability_count", models.IntegerField(default=0)),
                ("critical_vulnerabilities", models.IntegerField(default=0)),
                ("high_vulnerabilities", models.IntegerField(default=0)),
                ("medium_vulnerabilities", models.IntegerField(default=0)),
                ("low_vulnerabilities", models.IntegerField(default=0)),
                ("false_positives", models.IntegerField(default=0)),
                ("remediation_required", models.BooleanField(default=False)),
                ("test_results", models.JSONField(default=dict)),
                ("recommendations", models.TextField(blank=True)),
                ("run_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-run_at"],
                "indexes": [
                    models.Index(
                        fields=["test_category"], name="main_securi_test_ca_b96a82_idx"
                    ),
                    models.Index(
                        fields=["run_at"], name="main_securi_run_at_d2fe30_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ComplianceRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "regulation",
                    models.CharField(
                        choices=[
                            ("GDPR", "General Data Protection Regulation"),
                            ("PDPA", "Personal Data Protection Act"),
                            ("CCPA", "California Consumer Privacy Act"),
                            ("LGPD", "Lei Geral de Proteção de Dados"),
                            (
                                "PIPEDA",
                                "Personal Information Protection and Electronic Documents Act",
                            ),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "compliance_status",
                    models.CharField(
                        choices=[
                            ("compliant", "Compliant"),
                            ("non_compliant", "Non-Compliant"),
                            ("partially_compliant", "Partially Compliant"),
                            ("under_review", "Under Review"),
                        ],
                        max_length=20,
                    ),
                ),
                ("requirements", models.JSONField(default=dict)),
                ("compliance_evidence", models.TextField(blank=True)),
                ("gaps", models.TextField(blank=True)),
                ("action_plan", models.TextField(blank=True)),
                ("last_assessment", models.DateTimeField(auto_now_add=True)),
                ("next_assessment", models.DateTimeField(blank=True, null=True)),
                (
                    "compliance_officer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-last_assessment"],
                "unique_together": {("regulation",)},
            },
        ),
        migrations.CreateModel(
            name="Documentation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "doc_type",
                    models.CharField(
                        choices=[
                            ("user_guide", "User Guide"),
                            ("api_documentation", "API Documentation"),
                            ("deployment_guide", "Deployment Guide"),
                            ("troubleshooting", "Troubleshooting Guide"),
                            ("faq", "FAQ"),
                            ("changelog", "Changelog"),
                            ("architecture", "Architecture Documentation"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("ta", "Tamil"), ("si", "Sinhala")],
                        max_length=10,
                    ),
                ),
                ("version", models.CharField(default="1.0", max_length=20)),
                ("is_published", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
                "indexes": [
                    models.Index(
                        fields=["doc_type"], name="main_docume_doc_typ_506686_idx"
                    ),
                    models.Index(
                        fields=["language"], name="main_docume_languag_fa0674_idx"
                    ),
                    models.Index(
                        fields=["is_published"], name="main_docume_is_publ_dfa889_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="MonitoringAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("alert_name", models.CharField(max_length=200)),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("performance", "Performance Alert"),
                            ("security", "Security Alert"),
                            ("availability", "Availability Alert"),
                            ("error_rate", "Error Rate Alert"),
                            ("resource_usage", "Resource Usage Alert"),
                            ("custom", "Custom Alert"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("critical", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("message", models.TextField()),
                ("metric_value", models.FloatField(blank=True, null=True)),
                ("threshold_value", models.FloatField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("acknowledged", "Acknowledged"),
                            ("resolved", "Resolved"),
                            ("suppressed", "Suppressed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["alert_type"], name="main_monito_alert_t_9548d8_idx"
                    ),
                    models.Index(
                        fields=["severity"], name="main_monito_severit_2b124c_idx"
                    ),
                    models.Index(
                        fields=["status"], name="main_monito_status_c8e71d_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SecurityAudit",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "audit_type",
                    models.CharField(
                        choices=[
                            ("security_scan", "Security Scan"),
                            ("penetration_test", "Penetration Test"),
                            ("vulnerability_assessment", "Vulnerability Assessment"),
                            ("compliance_check", "Compliance Check"),
                            ("code_review", "Code Review"),
                            ("infrastructure_audit", "Infrastructure Audit"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("remediated", "Remediated"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("findings", models.JSONField(default=dict)),
                ("recommendations", models.TextField(blank=True)),
                ("remediation_actions", models.TextField(blank=True)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("next_audit_date", models.DateTimeField(blank=True, null=True)),
                (
                    "auditor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["audit_type"], name="main_securi_audit_t_7c6996_idx"
                    ),
                    models.Index(
                        fields=["status"], name="main_securi_status_408a72_idx"
                    ),
                    models.Index(
                        fields=["severity"], name="main_securi_severit_3e4ee9_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SupportTicket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("subject", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "ticket_type",
                    models.CharField(
                        choices=[
                            ("bug_report", "Bug Report"),
                            ("feature_request", "Feature Request"),
                            ("technical_support", "Technical Support"),
                            ("user_guide", "User Guide Request"),
                            ("billing", "Billing Issue"),
                            ("general", "General Inquiry"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("waiting_for_user", "Waiting for User"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("resolution", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="support_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["status"], name="main_suppor_status_7f5377_idx"
                    ),
                    models.Index(
                        fields=["priority"], name="main_suppor_priorit_8d0fe1_idx"
                    ),
                    models.Index(
                        fields=["ticket_type"], name="main_suppor_ticket__5050a9_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TestResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("test_name", models.CharField(max_length=200)),
                (
                    "test_type",
                    models.CharField(
                        choices=[
                            ("unit", "Unit Test"),
                            ("integration", "Integration Test"),
                            ("end_to_end", "End-to-End Test"),
                            ("performance", "Performance Test"),
                            ("security", "Security Test"),
                            ("user_acceptance", "User Acceptance Test"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("passed", "Passed"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                            ("error", "Error"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "execution_time",
                    models.FloatField(help_text="Execution time in seconds"),
                ),
                ("coverage_percentage", models.FloatField(blank=True, null=True)),
                ("test_output", models.TextField(blank=True)),
                ("error_details", models.TextField(blank=True)),
                ("test_environment", models.CharField(blank=True, max_length=100)),
                ("run_at", models.DateTimeField(auto_now_add=True)),
                (
                    "run_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-run_at"],
                "indexes": [
                    models.Index(
                        fields=["test_type"], name="main_testre_test_ty_ff7745_idx"
                    ),
                    models.Index(
                        fields=["status"], name="main_testre_status_b08e02_idx"
                    ),
                    models.Index(
                        fields=["run_at"], name="main_testre_run_at_e2a9bf_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TrainingMaterial",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "material_type",
                    models.CharField(
                        choices=[
                            ("video", "Video Tutorial"),
                            ("interactive", "Interactive Tutorial"),
                            ("step_by_step", "Step-by-Step Guide"),
                            ("cheat_sheet", "Cheat Sheet"),
                            ("best_practices", "Best Practices"),
                            ("case_study", "Case Study"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "estimated_duration",
                    models.IntegerField(help_text="Estimated duration in minutes"),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("ta", "Tamil"), ("si", "Sinhala")],
                        max_length=10,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["difficulty_level", "title"],
                "indexes": [
                    models.Index(
                        fields=["material_type"], name="main_traini_materia_ba333e_idx"
                    ),
                    models.Index(
                        fields=["difficulty_level"],
                        name="main_traini_difficu_062100_idx",
                    ),
                    models.Index(
                        fields=["language"], name="main_traini_languag_83b7a2_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserConsent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "consent_type",
                    models.CharField(
                        choices=[
                            ("data_processing", "Data Processing"),
                            ("marketing", "Marketing Communications"),
                            ("analytics", "Analytics and Tracking"),
                            ("third_party", "Third Party Sharing"),
                            ("cookies", "Cookie Usage"),
                            ("location", "Location Data"),
                        ],
                        max_length=50,
                    ),
                ),
                ("granted", models.BooleanField(default=False)),
                (
                    "consent_text",
                    models.TextField(help_text="Text presented to user for consent"),
                ),
                ("consent_version", models.CharField(default="1.0", max_length=20)),
                ("granted_at", models.DateTimeField(blank=True, null=True)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="consents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-granted_at"],
                "unique_together": {("user", "consent_type", "consent_version")},
            },
        ),
        migrations.CreateModel(
            name="UserGuide",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "guide_type",
                    models.CharField(
                        choices=[
                            ("getting_started", "Getting Started"),
                            ("feature_guide", "Feature Guide"),
                            ("workflow", "Workflow Guide"),
                            ("troubleshooting", "Troubleshooting"),
                            ("tips_tricks", "Tips & Tricks"),
                            ("advanced_usage", "Advanced Usage"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "target_audience",
                    models.CharField(
                        choices=[
                            ("end_user", "End User"),
                            ("administrator", "Administrator"),
                            ("developer", "Developer"),
                            ("business_user", "Business User"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("ta", "Tamil"), ("si", "Sinhala")],
                        max_length=10,
                    ),
                ),
                ("version", models.CharField(default="1.0", max_length=20)),
                ("is_published", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["guide_type", "title"],
                "indexes": [
                    models.Index(
                        fields=["guide_type"], name="main_usergu_guide_t_3264a9_idx"
                    ),
                    models.Index(
                        fields=["target_audience"],
                        name="main_usergu_target__261e9b_idx",
                    ),
                    models.Index(
                        fields=["language"], name="main_usergu_languag_223e68_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserOnboarding",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "onboarding_stage",
                    models.CharField(
                        choices=[
                            ("welcome", "Welcome"),
                            ("profile_setup", "Profile Setup"),
                            ("feature_tour", "Feature Tour"),
                            ("first_document", "First Document"),
                            ("training_completed", "Training Completed"),
                            ("onboarding_completed", "Onboarding Completed"),
                        ],
                        max_length=50,
                    ),
                ),
                ("stage_completed", models.BooleanField(default=False)),
                ("completion_date", models.DateTimeField(blank=True, null=True)),
                ("time_spent_minutes", models.IntegerField(default=0)),
                ("help_requests", models.IntegerField(default=0)),
                (
                    "satisfaction_score",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Very Dissatisfied"),
                            (2, "Dissatisfied"),
                            (3, "Neutral"),
                            (4, "Satisfied"),
                            (5, "Very Satisfied"),
                        ],
                        null=True,
                    ),
                ),
                ("feedback", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="onboarding_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["user", "onboarding_stage"],
                "unique_together": {("user", "onboarding_stage")},
            },
        ),
    ]
